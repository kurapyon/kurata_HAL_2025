//=============================================================================
//
// プレイヤー処理 [player.cpp]
// Author : GP11A132 09 倉田勇次
//
//=============================================================================
#include "player.h"
#include "input.h"
#include "bg.h"
#include "bullet.h"
#include "enemy.h"
#include "collision.h"
#include "Level.h"
#include "file.h"
#include "map.h"
#include "collision.h"
#include "fade.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_MAX						(2)													// テクスチャの数


#define TEXTURE_PATTERN_DIVIDE_X		(3)													// アニメパターンのテクスチャ内分割数（X)
#define TEXTURE_PATTERN_DIVIDE_Y		(4)													// アニメパターンのテクスチャ内分割数（Y)
#define ANIM_PATTERN_NUM				(TEXTURE_PATTERN_DIVIDE_X*TEXTURE_PATTERN_DIVIDE_Y)	// アニメーションパターン数
#define ANIM_WAIT						(4)													// アニメーションの切り替わるWait値

#define FIELD_GRID_Y					((int)FIELD_HEIGHT / MAP_TEXTURE_HEIGHT  + 2)		// マップの高さ余分に行を描画している	22
#define FIELD_GRID_X					((int)FIELD_WIDTH  / MAP_TEXTURE_WIDTH   + 2)		// マップの幅　余分に描画している		42

#define SCREEN_GRID_Y					((int)SCREEN_HEIGHT / MAP_TEXTURE_HEIGHT +3)		// スクリーンの高さ 余裕に描画している
#define SCREEN_GRID_X					((int)SCREEN_WIDTH  / MAP_TEXTURE_WIDTH  +2)		// スクリーンの幅   余分に描画している



//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
static ID3D11Buffer				*g_VertexBuffer = NULL;				// 頂点情報
static ID3D11ShaderResourceView	*g_Texture[TEXTURE_MAX] = { NULL };	// テクスチャ情報

static char *g_TexturName[TEXTURE_MAX] = {
	"data/TEXTURE/pchip02.png",
	"data/TEXTURE/pchip03.png",

};



static BOOL		g_Load = FALSE;			// 初期化を行ったかのフラグ
static MAPCHIP	g_MapChip[TEXTURE_MAX];	// プレイヤー構造体

//	[		22		  /		57		]
int g_Map[FIELD_GRID_Y][FIELD_GRID_X]
{									  // 10											20								27			30											40											50											60					 4
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1,  1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1,  1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,

	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1,

	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		 0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,		 0,  0,  0,  0,  0,  0,  0,

};

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitMap(void)
{
	ID3D11Device *pDevice = GetDevice();

	//テクスチャ生成
	for (int i = 0; i < TEXTURE_MAX; i++)
	{
		g_Texture[i] = NULL;
		D3DX11CreateShaderResourceViewFromFile(GetDevice(),
			g_TexturName[i],
			NULL,
			NULL,
			&g_Texture[i],
			NULL);
	}


	// 頂点バッファ生成
	D3D11_BUFFER_DESC bd;
	ZeroMemory(&bd, sizeof(bd));
	bd.Usage = D3D11_USAGE_DYNAMIC;
	bd.ByteWidth = sizeof(VERTEX_3D) * 4;
	bd.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	bd.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
	GetDevice()->CreateBuffer(&bd, NULL, &g_VertexBuffer);



	// テクスチャーの初期化
	for (int i = 0; i < TEXTURE_MAX; i++)
	{
		g_MapChip[i].texNo = i;

	}


	g_Load = TRUE;
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitMap(void)
{
	if (g_Load == FALSE) return;

	if (g_VertexBuffer)
	{
		g_VertexBuffer->Release();
		g_VertexBuffer = NULL;
	}

	for (int i = 0; i < TEXTURE_MAX; i++)
	{
		if (g_Texture[i])
		{
			g_Texture[i]->Release();
			g_Texture[i] = NULL;
		}
	}

	g_Load = FALSE;
}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateMap(void)
{
	// なし
}

//=============================================================================
// 描画処理
//=============================================================================
void DrawMap(void)
{
	// 頂点バッファ設定
	UINT stride = sizeof(VERTEX_3D);
	UINT offset = 0;
	GetDeviceContext()->IASetVertexBuffers(0, 1, &g_VertexBuffer, &stride, &offset);

	// マトリクス設定
	SetWorldViewProjection2D();

	// プリミティブトポロジ設定
	GetDeviceContext()->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);

	// マテリアル設定
	MATERIAL material;
	ZeroMemory(&material, sizeof(material));
	material.Diffuse = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);
	SetMaterial(material);

	// スクロール
	float scrollX = GetScrollX();
	float scrollY = GetScrollY();

	// マップチップの描画
	for (int y = 0; y < SCREEN_GRID_Y; y++)
	{
		for (int x = 0; x < SCREEN_GRID_X; x++)
		{
			int date = g_Map[y + (int)(scrollY / MAP_TEXTURE_HEIGHT)][x + (int)(scrollX / MAP_TEXTURE_WIDTH)];


			// g_Mapの配列の中身によって、表示するものを変える
			switch (date)
			{
			case -1:	// -1なら何もしない

				continue;

			break;

			case 0:		// 0なら0番目のテクスチャーを表示する

				// テクスチャ設定
				GetDeviceContext()->PSSetShaderResources(0, 1, &g_Texture[g_MapChip[date].texNo]);


				// マップチップのテクスチャーの大きさ
				float mx = (float)((x * MAP_TEXTURE_WIDTH) - (fmodf(scrollX, MAP_TEXTURE_WIDTH)));		// テクスチャーの表示位置X
				float my = (float)((y * MAP_TEXTURE_HEIGHT) - (fmodf(scrollY, MAP_TEXTURE_HEIGHT)));		// テクスチャーの表示位置Y
				float mw = MAP_TEXTURE_WIDTH;															// テクスチャーの表示幅
				float mh = MAP_TEXTURE_HEIGHT;															// 表示高さ


				// アニメーション用
				float tw = 1.0f;	// テクスチャの幅
				float th = 1.0f;	// テクスチャの高さ
				float tx = 0.0f;	// テクスチャの左上X座標
				float ty = 0.0f;	// テクスチャの左上Y座標


				// １枚のポリゴンの頂点とテクスチャ座標を設定
				SetSprite(g_VertexBuffer, mx, my, mw, mh, tx, ty, tw, th);

				// ポリゴン描画
				GetDeviceContext()->Draw(4, 0);

			break;

			}

		}

	}
}

// スクロールの制限
float GetScrollX(void)
{
	PLAYER* player = GetPlayer();
	float scrollX  = player[0].pos.x - SCREEN_CENTER_X;

	// スクロールの限界
	if (scrollX < 0.0f)
	{
		scrollX = 0.0f;
	}
	else if (scrollX > FIELD_WIDTH - SCREEN_WIDTH)
	{
		scrollX = FIELD_WIDTH - SCREEN_WIDTH;
	}

	return scrollX;
}

// スクロールの制限
float GetScrollY(void)
{
	PLAYER* player = GetPlayer();
	float scrollY = player[0].pos.y - SCREEN_CENTER_Y;

	if (scrollY < 0.0f)
	{
		scrollY = 0.0f;
	}
	else if (scrollY > FIELD_HEIGHT - SCREEN_HEIGHT)
	{
		scrollY = FIELD_HEIGHT - SCREEN_HEIGHT;
	}

	return scrollY;
}

int GetMapDate(int y, int x)
{
	return g_Map[y][x];

}
